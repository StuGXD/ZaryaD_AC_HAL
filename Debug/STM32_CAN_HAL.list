
STM32_CAN_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002984  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011a0  00000000  00000000  00026300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000560  00000000  00000000  000274a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c8  00000000  00000000  00027a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bba5  00000000  00000000  00027ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005085  00000000  00000000  00043a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a699d  00000000  00000000  00048af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef48f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001468  00000000  00000000  000ef50c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002928 	.word	0x08002928

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002928 	.word	0x08002928

080001c8 <main>:
static void CAN_Start(void); //custom start can & notification
static void Create_TxData(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7); //custom create send data array
static void Send_CAN(uint32_t ExtID, uint32_t DATA_type, uint32_t Dlen, uint8_t TxData[8]); //custom can send function

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af04      	add	r7, sp, #16
  HAL_Init();
 80001ce:	f000 fa3f 	bl	8000650 <HAL_Init>
  SystemClock_Config();
 80001d2:	f000 f825 	bl	8000220 <SystemClock_Config>
  MX_GPIO_Init();
 80001d6:	f000 f89f 	bl	8000318 <MX_GPIO_Init>
  MX_CAN_Init();
 80001da:	f000 f867 	bl	80002ac <MX_CAN_Init>

  CAN_Filter_Init();
 80001de:	f000 f8bf 	bl	8000360 <CAN_Filter_Init>
  CAN_Start();
 80001e2:	f000 f8dd 	bl	80003a0 <CAN_Start>

  while (1)
  {
	Create_TxData(0xAA,0x00,0xCC,0xDD,0x00,0xFF,0x00,0x01);
 80001e6:	2301      	movs	r3, #1
 80001e8:	9303      	str	r3, [sp, #12]
 80001ea:	2300      	movs	r3, #0
 80001ec:	9302      	str	r3, [sp, #8]
 80001ee:	23ff      	movs	r3, #255	; 0xff
 80001f0:	9301      	str	r3, [sp, #4]
 80001f2:	2300      	movs	r3, #0
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	23dd      	movs	r3, #221	; 0xdd
 80001f8:	22cc      	movs	r2, #204	; 0xcc
 80001fa:	2100      	movs	r1, #0
 80001fc:	20aa      	movs	r0, #170	; 0xaa
 80001fe:	f000 f903 	bl	8000408 <Create_TxData>
	Send_CAN(Block_Id,CAN_RTR_DATA,8,TxData);
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <main+0x50>)
 8000204:	2208      	movs	r2, #8
 8000206:	2100      	movs	r1, #0
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <main+0x54>)
 800020a:	f000 f8d7 	bl	80003bc <Send_CAN>

	HAL_Delay(1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000212:	f000 fa83 	bl	800071c <HAL_Delay>
	Create_TxData(0xAA,0x00,0xCC,0xDD,0x00,0xFF,0x00,0x01);
 8000216:	e7e6      	b.n	80001e6 <main+0x1e>
 8000218:	20000050 	.word	0x20000050
 800021c:	00fef70c 	.word	0x00fef70c

08000220 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fb72 	bl	8002918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fa43 	bl	80016f4 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f8f6 	bl	8000464 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f936 	bl	8002504 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029e:	f000 f8e1 	bl	8000464 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_CAN_Init>:

static void MX_CAN_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  hcan.Instance = CAN; //Speed 125kb\s
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_CAN_Init+0x64>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <MX_CAN_Init+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 24;
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <MX_CAN_Init+0x64>)
 80002b8:	2218      	movs	r2, #24
 80002ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_CAN_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002c2:	4b13      	ldr	r3, [pc, #76]	; (8000310 <MX_CAN_Init+0x64>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_CAN_Init+0x64>)
 80002ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80002ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_CAN_Init+0x64>)
 80002d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_CAN_Init+0x64>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MX_CAN_Init+0x64>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CAN_Init+0x64>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_CAN_Init+0x64>)
 80002fe:	f000 fa2f 	bl	8000760 <HAL_CAN_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000308:	f000 f8ac 	bl	8000464 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000028 	.word	0x20000028
 8000314:	40006400 	.word	0x40006400

08000318 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_GPIO_Init+0x44>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <MX_GPIO_Init+0x44>)
 8000324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_GPIO_Init+0x44>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_GPIO_Init+0x44>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <MX_GPIO_Init+0x44>)
 800033c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_GPIO_Init+0x44>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <CAN_Filter_Init>:

static void CAN_Filter_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef	CAN_Filter;

	CAN_Filter.FilterBank = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
	CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
	CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 800036e:	2301      	movs	r3, #1
 8000370:	623b      	str	r3, [r7, #32]
	CAN_Filter.FilterMode = CAN_FILTERSCALE_32BIT;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
	CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
	CAN_Filter.FilterIdHigh = 0x0000;
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
	CAN_Filter.FilterIdLow = 0x0000;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
	CAN_Filter.FilterMaskIdHigh = 0x0000;
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
	CAN_Filter.FilterMaskIdLow = 0x0000;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &CAN_Filter);
 800038a:	463b      	mov	r3, r7
 800038c:	4619      	mov	r1, r3
 800038e:	4803      	ldr	r0, [pc, #12]	; (800039c <CAN_Filter_Init+0x3c>)
 8000390:	f000 fae1 	bl	8000956 <HAL_CAN_ConfigFilter>
}
 8000394:	bf00      	nop
 8000396:	3728      	adds	r7, #40	; 0x28
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <CAN_Start>:

static void CAN_Start(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING);
 80003a4:	2103      	movs	r1, #3
 80003a6:	4804      	ldr	r0, [pc, #16]	; (80003b8 <CAN_Start+0x18>)
 80003a8:	f000 fcbe 	bl	8000d28 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan);
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <CAN_Start+0x18>)
 80003ae:	f000 fb9c 	bl	8000aea <HAL_CAN_Start>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028

080003bc <Send_CAN>:

static void Send_CAN(uint32_t ExtID, uint32_t DATA_type, uint32_t Dlen, uint8_t TxData[8])
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	603b      	str	r3, [r7, #0]
	TxHeader.ExtId = ExtID;
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <Send_CAN+0x40>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = DATA_type;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <Send_CAN+0x40>)
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <Send_CAN+0x40>)
 80003d8:	2204      	movs	r2, #4
 80003da:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = Dlen;
 80003dc:	4a07      	ldr	r2, [pc, #28]	; (80003fc <Send_CAN+0x40>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6113      	str	r3, [r2, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <Send_CAN+0x40>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	751a      	strb	r2, [r3, #20]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <Send_CAN+0x44>)
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4903      	ldr	r1, [pc, #12]	; (80003fc <Send_CAN+0x40>)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <Send_CAN+0x48>)
 80003f0:	f000 fbbf 	bl	8000b72 <HAL_CAN_AddTxMessage>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000064 	.word	0x20000064
 8000400:	20000058 	.word	0x20000058
 8000404:	20000028 	.word	0x20000028

08000408 <Create_TxData>:

static void Create_TxData(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7)
{
 8000408:	b490      	push	{r4, r7}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4604      	mov	r4, r0
 8000410:	4608      	mov	r0, r1
 8000412:	4611      	mov	r1, r2
 8000414:	461a      	mov	r2, r3
 8000416:	4623      	mov	r3, r4
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	4603      	mov	r3, r0
 800041c:	71bb      	strb	r3, [r7, #6]
 800041e:	460b      	mov	r3, r1
 8000420:	717b      	strb	r3, [r7, #5]
 8000422:	4613      	mov	r3, r2
 8000424:	713b      	strb	r3, [r7, #4]
	TxData[0] = byte0;
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <Create_TxData+0x58>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	7013      	strb	r3, [r2, #0]
	TxData[1] = byte1;
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <Create_TxData+0x58>)
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	7053      	strb	r3, [r2, #1]
	TxData[2] = byte2;
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <Create_TxData+0x58>)
 8000434:	797b      	ldrb	r3, [r7, #5]
 8000436:	7093      	strb	r3, [r2, #2]
	TxData[3] = byte3;
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <Create_TxData+0x58>)
 800043a:	793b      	ldrb	r3, [r7, #4]
 800043c:	70d3      	strb	r3, [r2, #3]
	TxData[4] = byte4;
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <Create_TxData+0x58>)
 8000440:	7c3b      	ldrb	r3, [r7, #16]
 8000442:	7113      	strb	r3, [r2, #4]
	TxData[5] = byte5;
 8000444:	4a06      	ldr	r2, [pc, #24]	; (8000460 <Create_TxData+0x58>)
 8000446:	7d3b      	ldrb	r3, [r7, #20]
 8000448:	7153      	strb	r3, [r2, #5]
	TxData[6] = byte6;
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <Create_TxData+0x58>)
 800044c:	7e3b      	ldrb	r3, [r7, #24]
 800044e:	7193      	strb	r3, [r2, #6]
	TxData[7] = byte7;
 8000450:	4a03      	ldr	r2, [pc, #12]	; (8000460 <Create_TxData+0x58>)
 8000452:	7f3b      	ldrb	r3, [r7, #28]
 8000454:	71d3      	strb	r3, [r2, #7]
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bc90      	pop	{r4, r7}
 800045e:	4770      	bx	lr
 8000460:	20000050 	.word	0x20000050

08000464 <Error_Handler>:

void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
  __disable_irq();
  while (1)
 800046a:	e7fe      	b.n	800046a <Error_Handler+0x6>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1f      	ldr	r2, [pc, #124]	; (8000550 <HAL_CAN_MspInit+0x9c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d137      	bne.n	8000546 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000506:	2303      	movs	r3, #3
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8000516:	2307      	movs	r3, #7
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <HAL_CAN_MspInit+0xa4>)
 8000522:	f000 ff6d 	bl	8001400 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 2, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	2013      	movs	r0, #19
 800052c:	f000 ff31 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000530:	2013      	movs	r0, #19
 8000532:	f000 ff4a 	bl	80013ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	2014      	movs	r0, #20
 800053c:	f000 ff29 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000540:	2014      	movs	r0, #20
 8000542:	f000 ff42 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000546:	bf00      	nop
 8000548:	3728      	adds	r7, #40	; 0x28
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40006400 	.word	0x40006400
 8000554:	40021000 	.word	0x40021000
 8000558:	48000c00 	.word	0x48000c00

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 f898 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80005b6:	f000 fbdd 	bl	8000d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028

080005c4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80005ca:	f000 fbd3 	bl	8000d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000634 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490e      	ldr	r1, [pc, #56]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0b      	ldr	r4, [pc, #44]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000626:	f7ff ffd7 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062a:	f002 f951 	bl	80028d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062e:	f7ff fdcb 	bl	80001c8 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000634:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000640:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000648:	2000009c 	.word	0x2000009c

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 fe8b 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff fefe 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fea3 	bl	80013e6 <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 fe6b 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000098 	.word	0x20000098

08000704 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;  
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_GetTick+0x14>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000098 	.word	0x20000098

0800071c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff ffee 	bl	8000704 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_Delay+0x40>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffde 	bl	8000704 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000008 	.word	0x20000008

08000760 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e0ed      	b.n	800094e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d102      	bne.n	8000784 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe98 	bl	80004b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f022 0202 	bic.w	r2, r2, #2
 8000792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000794:	f7ff ffb6 	bl	8000704 <HAL_GetTick>
 8000798:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800079a:	e012      	b.n	80007c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800079c:	f7ff ffb2 	bl	8000704 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	2b0a      	cmp	r3, #10
 80007a8:	d90b      	bls.n	80007c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2205      	movs	r2, #5
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e0c5      	b.n	800094e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1e5      	bne.n	800079c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007e0:	f7ff ff90 	bl	8000704 <HAL_GetTick>
 80007e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e6:	e012      	b.n	800080e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007e8:	f7ff ff8c 	bl	8000704 <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d90b      	bls.n	800080e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2205      	movs	r2, #5
 8000806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e09f      	b.n	800094e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0e5      	beq.n	80007e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7e1b      	ldrb	r3, [r3, #24]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d108      	bne.n	8000836 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	e007      	b.n	8000846 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7e5b      	ldrb	r3, [r3, #25]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d108      	bne.n	8000860 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e007      	b.n	8000870 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800086e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7e9b      	ldrb	r3, [r3, #26]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d108      	bne.n	800088a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f042 0220 	orr.w	r2, r2, #32
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e007      	b.n	800089a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f022 0220 	bic.w	r2, r2, #32
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7edb      	ldrb	r3, [r3, #27]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d108      	bne.n	80008b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f022 0210 	bic.w	r2, r2, #16
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e007      	b.n	80008c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f042 0210 	orr.w	r2, r2, #16
 80008c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d108      	bne.n	80008de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f042 0208 	orr.w	r2, r2, #8
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	e007      	b.n	80008ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0208 	bic.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7f5b      	ldrb	r3, [r3, #29]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d108      	bne.n	8000908 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0204 	orr.w	r2, r2, #4
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e007      	b.n	8000918 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0204 	bic.w	r2, r2, #4
 8000916:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	431a      	orrs	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	431a      	orrs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	ea42 0103 	orr.w	r1, r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800096c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800096e:	7cfb      	ldrb	r3, [r7, #19]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d003      	beq.n	800097c <HAL_CAN_ConfigFilter+0x26>
 8000974:	7cfb      	ldrb	r3, [r7, #19]
 8000976:	2b02      	cmp	r3, #2
 8000978:	f040 80aa 	bne.w	8000ad0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000982:	f043 0201 	orr.w	r2, r3, #1
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f003 031f 	and.w	r3, r3, #31
 8000994:	2201      	movs	r2, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d123      	bne.n	80009fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3248      	adds	r2, #72	; 0x48
 80009de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009f4:	6979      	ldr	r1, [r7, #20]
 80009f6:	3348      	adds	r3, #72	; 0x48
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d122      	bne.n	8000a4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3248      	adds	r2, #72	; 0x48
 8000a2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	3348      	adds	r3, #72	; 0x48
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a66:	e007      	b.n	8000a78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d109      	bne.n	8000a94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a92:	e007      	b.n	8000aa4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d107      	bne.n	8000abc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ac2:	f023 0201 	bic.w	r2, r3, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e006      	b.n	8000ade <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
  }
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d12e      	bne.n	8000b5c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2202      	movs	r2, #2
 8000b02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b16:	f7ff fdf5 	bl	8000704 <HAL_GetTick>
 8000b1a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b1c:	e012      	b.n	8000b44 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1e:	f7ff fdf1 	bl	8000704 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b0a      	cmp	r3, #10
 8000b2a:	d90b      	bls.n	8000b44 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e012      	b.n	8000b6a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1e5      	bne.n	8000b1e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e006      	b.n	8000b6a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
  }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b089      	sub	sp, #36	; 0x24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b86:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d003      	beq.n	8000b9e <HAL_CAN_AddTxMessage+0x2c>
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	f040 80b8 	bne.w	8000d0e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10a      	bne.n	8000bbe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d105      	bne.n	8000bbe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 80a0 	beq.w	8000cfe <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	0e1b      	lsrs	r3, r3, #24
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d907      	bls.n	8000bde <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e09e      	b.n	8000d1c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10d      	bne.n	8000c0c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bfa:	68f9      	ldr	r1, [r7, #12]
 8000bfc:	6809      	ldr	r1, [r1, #0]
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3318      	adds	r3, #24
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	440b      	add	r3, r1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00f      	b.n	8000c2c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3318      	adds	r3, #24
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	440b      	add	r3, r1
 8000c2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3318      	adds	r3, #24
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	7d1b      	ldrb	r3, [r3, #20]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d111      	bne.n	8000c6c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3318      	adds	r3, #24
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	4413      	add	r3, r2
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	6811      	ldr	r1, [r2, #0]
 8000c5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3318      	adds	r3, #24
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	440b      	add	r3, r1
 8000c68:	3304      	adds	r3, #4
 8000c6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3307      	adds	r3, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	061a      	lsls	r2, r3, #24
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3306      	adds	r3, #6
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3305      	adds	r3, #5
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	4313      	orrs	r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	3204      	adds	r2, #4
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	4610      	mov	r0, r2
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	6811      	ldr	r1, [r2, #0]
 8000c94:	ea43 0200 	orr.w	r2, r3, r0
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	440b      	add	r3, r1
 8000c9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ca2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	061a      	lsls	r2, r3, #24
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	ea43 0200 	orr.w	r2, r3, r0
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	6811      	ldr	r1, [r2, #0]
 8000cec:	f043 0201 	orr.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	440b      	add	r3, r1
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e00e      	b.n	8000d1c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e006      	b.n	8000d1c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
  }
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3724      	adds	r7, #36	; 0x24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d002      	beq.n	8000d46 <HAL_CAN_ActivateNotification+0x1e>
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d109      	bne.n	8000d5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6959      	ldr	r1, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e006      	b.n	8000d68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
  }
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d07c      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f97d 	bl	80010d6 <HAL_CAN_TxMailbox0CompleteCallback>
 8000ddc:	e016      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	e00c      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
 8000e04:	e002      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f983 	bl	8001112 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d024      	beq.n	8000e60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f95d 	bl	80010ea <HAL_CAN_TxMailbox1CompleteCallback>
 8000e30:	e016      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
 8000e44:	e00c      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
 8000e58:	e002      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f963 	bl	8001126 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d024      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f93d 	bl	80010fe <HAL_CAN_TxMailbox2CompleteCallback>
 8000e84:	e016      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
 8000e98:	e00c      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000eac:	e002      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f943 	bl	800113a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f934 	bl	8001162 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f91b 	bl	800114e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00c      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2210      	movs	r2, #16
 8000f3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2208      	movs	r2, #8
 8000f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f916 	bl	800118a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8fd 	bl	8001176 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2210      	movs	r2, #16
 8000f96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f900 	bl	800119e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8f9 	bl	80011b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d06c      	beq.n	80010ae <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102e:	2b00      	cmp	r3, #0
 8001030:	d03d      	beq.n	80010ae <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001038:	2b00      	cmp	r3, #0
 800103a:	d038      	beq.n	80010ae <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001042:	2b30      	cmp	r3, #48	; 0x30
 8001044:	d017      	beq.n	8001076 <HAL_CAN_IRQHandler+0x302>
 8001046:	2b30      	cmp	r3, #48	; 0x30
 8001048:	d804      	bhi.n	8001054 <HAL_CAN_IRQHandler+0x2e0>
 800104a:	2b10      	cmp	r3, #16
 800104c:	d009      	beq.n	8001062 <HAL_CAN_IRQHandler+0x2ee>
 800104e:	2b20      	cmp	r3, #32
 8001050:	d00c      	beq.n	800106c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001052:	e024      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001054:	2b50      	cmp	r3, #80	; 0x50
 8001056:	d018      	beq.n	800108a <HAL_CAN_IRQHandler+0x316>
 8001058:	2b60      	cmp	r3, #96	; 0x60
 800105a:	d01b      	beq.n	8001094 <HAL_CAN_IRQHandler+0x320>
 800105c:	2b40      	cmp	r3, #64	; 0x40
 800105e:	d00f      	beq.n	8001080 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001060:	e01d      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800106a:	e018      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001074:	e013      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800107e:	e00e      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001088:	e009      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001092:	e004      	b.n	800109e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800109c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2204      	movs	r2, #4
 80010b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f87c 	bl	80011c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff29 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff3e 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff31 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e154      	b.n	80016ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8146 	beq.w	80016b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d00b      	beq.n	8001448 <HAL_GPIO_Init+0x48>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	2b11      	cmp	r3, #17
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 0201 	and.w	r2, r3, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0xea>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d123      	bne.n	8001532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	6939      	ldr	r1, [r7, #16]
 800152e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0203 	and.w	r2, r3, #3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80a0 	beq.w	80016b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <HAL_GPIO_Init+0x2d8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_GPIO_Init+0x2d8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <HAL_GPIO_Init+0x2d8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <HAL_GPIO_Init+0x2dc>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b6:	d019      	beq.n	80015ec <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2e0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d013      	beq.n	80015e8 <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2e4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_GPIO_Init+0x2e8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1e0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_GPIO_Init+0x2ec>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1dc>
 80015d8:	2304      	movs	r3, #4
 80015da:	e008      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015dc:	2305      	movs	r3, #5
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e0:	2303      	movs	r3, #3
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015ec:	2300      	movs	r3, #0
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015fe:	4937      	ldr	r1, [pc, #220]	; (80016dc <HAL_GPIO_Init+0x2dc>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001630:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800165a:	4a25      	ldr	r2, [pc, #148]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f47f aea3 	bne.w	8001410 <HAL_GPIO_Init+0x10>
  }
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	48000400 	.word	0x48000400
 80016e4:	48000800 	.word	0x48000800
 80016e8:	48000c00 	.word	0x48000c00
 80016ec:	48001000 	.word	0x48001000
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	f000 bef4 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 816a 	beq.w	80019f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800171e:	4bb3      	ldr	r3, [pc, #716]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d00c      	beq.n	8001744 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172a:	4bb0      	ldr	r3, [pc, #704]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d159      	bne.n	80017ea <HAL_RCC_OscConfig+0xf6>
 8001736:	4bad      	ldr	r3, [pc, #692]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001742:	d152      	bne.n	80017ea <HAL_RCC_OscConfig+0xf6>
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001748:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001758:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0x82>
 8001770:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0xae>
 8001776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800178a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001792:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800179e:	4b93      	ldr	r3, [pc, #588]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017ae:	fa92 f2a2 	rbit	r2, r2
 80017b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017ba:	fab2 f282 	clz	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f042 0220 	orr.w	r2, r2, #32
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	f002 021f 	and.w	r2, r2, #31
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 810c 	beq.w	80019f0 <HAL_RCC_OscConfig+0x2fc>
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 8106 	bne.w	80019f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f000 be86 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x110>
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a7c      	ldr	r2, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e030      	b.n	8001866 <HAL_RCC_OscConfig+0x172>
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x134>
 800180e:	4b77      	ldr	r3, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a76      	ldr	r2, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b74      	ldr	r3, [pc, #464]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a73      	ldr	r2, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01e      	b.n	8001866 <HAL_RCC_OscConfig+0x172>
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0x15a>
 8001834:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6c      	ldr	r2, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 800183a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0x172>
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a66      	ldr	r2, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001864:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f023 020f 	bic.w	r2, r3, #15
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	495d      	ldr	r1, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001876:	4313      	orrs	r3, r2
 8001878:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d059      	beq.n	8001938 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7fe ff3e 	bl	8000704 <HAL_GetTick>
 8001888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7fe ff39 	bl	8000704 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d902      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	f000 be29 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x1e2>
 80018d0:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x20e>
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800190a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001916:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ab      	beq.n	800188e <HAL_RCC_OscConfig+0x19a>
 8001936:	e05c      	b.n	80019f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe fee4 	bl	8000704 <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001942:	f7fe fedf 	bl	8000704 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d902      	bls.n	8001958 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	f000 bdcf 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800196c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x296>
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x2c2>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800199e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_RCC_OscConfig+0x2f8>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019c2:	fa92 f2a2 	rbit	r2, r2
 80019c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ab      	bne.n	8001942 <HAL_RCC_OscConfig+0x24e>
 80019ea:	e002      	b.n	80019f2 <HAL_RCC_OscConfig+0x2fe>
 80019ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 816f 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a02:	4bd0      	ldr	r3, [pc, #832]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a0e:	4bcd      	ldr	r3, [pc, #820]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d16c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x400>
 8001a1a:	4bca      	ldr	r3, [pc, #808]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d166      	bne.n	8001af4 <HAL_RCC_OscConfig+0x400>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x362>
 8001a50:	4bbc      	ldr	r3, [pc, #752]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x38a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a7a:	4bb2      	ldr	r3, [pc, #712]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a84:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a88:	fa92 f2a2 	rbit	r2, r2
 8001a8c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a90:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f002 021f 	and.w	r2, r2, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f000 bd1b 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	21f8      	movs	r1, #248	; 0xf8
 8001ad0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ad8:	fa91 f1a1 	rbit	r1, r1
 8001adc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ae0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ae4:	fab1 f181 	clz	r1, r1
 8001ae8:	b2c9      	uxtb	r1, r1
 8001aea:	408b      	lsls	r3, r1
 8001aec:	4995      	ldr	r1, [pc, #596]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e0f5      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8085 	beq.w	8001c0a <HAL_RCC_OscConfig+0x516>
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	461a      	mov	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7fe fdea 	bl	8000704 <HAL_GetTick>
 8001b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7fe fde5 	bl	8000704 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d902      	bls.n	8001b4c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f000 bcd5 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_RCC_OscConfig+0x488>
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4b0>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001baa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bae:	fa92 f2a2 	rbit	r2, r2
 8001bb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0af      	beq.n	8001b36 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	21f8      	movs	r1, #248	; 0xf8
 8001be6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bee:	fa91 f1a1 	rbit	r1, r1
 8001bf2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bf6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bfa:	fab1 f181 	clz	r1, r1
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	408b      	lsls	r3, r1
 8001c02:	4950      	ldr	r1, [pc, #320]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e06a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5ec>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fd65 	bl	8000704 <HAL_GetTick>
 8001c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7fe fd60 	bl	8000704 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d902      	bls.n	8001c56 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f000 bc50 	b.w	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0x592>
 8001c80:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e013      	b.n	8001cae <HAL_RCC_OscConfig+0x5ba>
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x650>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cb4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cb8:	fa92 f2a2 	rbit	r2, r2
 8001cbc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001cc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1af      	bne.n	8001c40 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80da 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d069      	beq.n	8001dce <HAL_RCC_OscConfig+0x6da>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x654>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7fe fcee 	bl	8000704 <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2c:	e00e      	b.n	8001d4c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7fe fce9 	bl	8000704 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d906      	bls.n	8001d4c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e3d9      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	10908120 	.word	0x10908120
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4ba5      	ldr	r3, [pc, #660]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d96:	2102      	movs	r1, #2
 8001d98:	6019      	str	r1, [r3, #0]
 8001d9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f1a3 	rbit	r1, r3
 8001da4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001da8:	6019      	str	r1, [r3, #0]
  return result;
 8001daa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0b0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x63a>
 8001dcc:	e06a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7b0>
 8001dce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001de4:	601a      	str	r2, [r3, #0]
  return result;
 8001de6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_OscConfig+0x934>)
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe fc80 	bl	8000704 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fc7b 	bl	8000704 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e36b      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001e1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e52:	2202      	movs	r2, #2
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e6e:	2102      	movs	r1, #2
 8001e70:	6019      	str	r1, [r3, #0]
 8001e72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f1a3 	rbit	r1, r3
 8001e7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e80:	6019      	str	r1, [r3, #0]
  return result;
 8001e82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1b2      	bne.n	8001e0a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8158 	beq.w	8002164 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a56      	ldr	r2, [pc, #344]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_OscConfig+0x938>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11a      	bne.n	8001f2e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x938>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_RCC_OscConfig+0x938>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f04:	f7fe fbfe 	bl	8000704 <HAL_GetTick>
 8001f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7fe fbf9 	bl	8000704 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e2e9      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x938>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x852>
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e02f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x876>
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a33      	ldr	r2, [pc, #204]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e01d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x89a>
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d06b      	beq.n	8002088 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fba8 	bl	8000704 <HAL_GetTick>
 8001fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fba3 	bl	8000704 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e291      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 8001fd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002000:	601a      	str	r2, [r3, #0]
  return result;
 8002002:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002006:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d109      	bne.n	8002030 <HAL_RCC_OscConfig+0x93c>
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <HAL_RCC_OscConfig+0x930>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x958>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	10908120 	.word	0x10908120
 800202c:	40007000 	.word	0x40007000
 8002030:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4bbb      	ldr	r3, [pc, #748]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002050:	2102      	movs	r1, #2
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002062:	6011      	str	r1, [r2, #0]
  return result;
 8002064:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d099      	beq.n	8001fba <HAL_RCC_OscConfig+0x8c6>
 8002086:	e063      	b.n	8002150 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe fb3c 	bl	8000704 <HAL_GetTick>
 800208c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00b      	b.n	80020aa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe fb37 	bl	8000704 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e225      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 80020aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c6:	2202      	movs	r2, #2
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020d8:	601a      	str	r2, [r3, #0]
  return result;
 80020da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_OscConfig+0xa06>
 80020f4:	4b90      	ldr	r3, [pc, #576]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	e00d      	b.n	8002116 <HAL_RCC_OscConfig+0xa22>
 80020fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020fe:	2202      	movs	r2, #2
 8002100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800211a:	2102      	movs	r1, #2
 800211c:	6011      	str	r1, [r2, #0]
 800211e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	fa92 f1a2 	rbit	r1, r2
 8002128:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800212c:	6011      	str	r1, [r2, #0]
  return result;
 800212e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f002 021f 	and.w	r2, r2, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1a0      	bne.n	8002092 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002150:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b77      	ldr	r3, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4a76      	ldr	r2, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002162:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 81c2 	beq.w	80024f4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b71      	ldr	r3, [pc, #452]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	f000 819c 	beq.w	80024b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	f040 8114 	bne.w	80023b2 <HAL_RCC_OscConfig+0xcbe>
 800218a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800218e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021a2:	601a      	str	r2, [r3, #0]
  return result;
 80021a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	461a      	mov	r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe faa0 	bl	8000704 <HAL_GetTick>
 80021c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	e009      	b.n	80021de <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7fe fa9b 	bl	8000704 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e18b      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 80021de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0xb24>
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e01b      	b.n	8002250 <HAL_RCC_OscConfig+0xb5c>
 8002218:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800221c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002254:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	fa92 f1a2 	rbit	r1, r2
 8002264:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002268:	6011      	str	r1, [r2, #0]
  return result;
 800226a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f002 021f 	and.w	r2, r2, #31
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d19e      	bne.n	80021ca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	4925      	ldr	r1, [pc, #148]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022c0:	601a      	str	r2, [r3, #0]
  return result;
 80022c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fa11 	bl	8000704 <HAL_GetTick>
 80022e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e6:	e009      	b.n	80022fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fa0c 	bl	8000704 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0fc      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 80022fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002314:	601a      	str	r2, [r3, #0]
  return result;
 8002316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800231a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0xc48>
 8002330:	4b01      	ldr	r3, [pc, #4]	; (8002338 <HAL_RCC_OscConfig+0xc44>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	e01e      	b.n	8002374 <HAL_RCC_OscConfig+0xc80>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800235a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0xe0c>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	fa92 f1a2 	rbit	r1, r2
 8002388:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800238c:	6011      	str	r1, [r2, #0]
  return result;
 800238e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d09b      	beq.n	80022e8 <HAL_RCC_OscConfig+0xbf4>
 80023b0:	e0a0      	b.n	80024f4 <HAL_RCC_OscConfig+0xe00>
 80023b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	461a      	mov	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe f98c 	bl	8000704 <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe f987 	bl	8000704 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e077      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
 8002406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241e:	601a      	str	r2, [r3, #0]
  return result;
 8002420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0xd4c>
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_OscConfig+0xe0c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0xd84>
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f107 0318 	add.w	r3, r7, #24
 800245e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_OscConfig+0xe0c>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	f107 0210 	add.w	r2, r7, #16
 800247c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002480:	6011      	str	r1, [r2, #0]
 8002482:	f107 0210 	add.w	r2, r7, #16
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	fa92 f1a2 	rbit	r1, r2
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	6011      	str	r1, [r2, #0]
  return result;
 8002492:	f107 020c 	add.w	r2, r7, #12
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	fab2 f282 	clz	r2, r2
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f002 021f 	and.w	r2, r2, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d19e      	bne.n	80023f2 <HAL_RCC_OscConfig+0xcfe>
 80024b4:	e01e      	b.n	80024f4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0xe0c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b09e      	sub	sp, #120	; 0x78
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e162      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b90      	ldr	r3, [pc, #576]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b8d      	ldr	r3, [pc, #564]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	498b      	ldr	r1, [pc, #556]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e14a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	497f      	ldr	r1, [pc, #508]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80dc 	beq.w	8002730 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d13c      	bne.n	80025fa <HAL_RCC_ClockConfig+0xf6>
 8002580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002584:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d102      	bne.n	80025aa <HAL_RCC_ClockConfig+0xa6>
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e00f      	b.n	80025ca <HAL_RCC_ClockConfig+0xc6>
 80025aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	667b      	str	r3, [r7, #100]	; 0x64
 80025b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60
 80025be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80025d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025d2:	fa92 f2a2 	rbit	r2, r2
 80025d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d17b      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0f3      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d13c      	bne.n	800267c <HAL_RCC_ClockConfig+0x178>
 8002602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002606:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_ClockConfig+0x128>
 8002626:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e00f      	b.n	800264c <HAL_RCC_ClockConfig+0x148>
 800262c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
 800263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
 8002640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002650:	63ba      	str	r2, [r7, #56]	; 0x38
 8002652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800265a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d13a      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b2      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
 800267c:	2302      	movs	r3, #2
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x1a0>
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e00d      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1bc>
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2202      	movs	r2, #2
 80026c2:	61ba      	str	r2, [r7, #24]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	617a      	str	r2, [r7, #20]
  return result;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e079      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	491a      	ldr	r1, [pc, #104]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe f800 	bl	8000704 <HAL_GetTick>
 8002704:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7fd fffc 	bl	8000704 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e061      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d214      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	4906      	ldr	r1, [pc, #24]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e040      	b.n	80027e2 <HAL_RCC_ClockConfig+0x2de>
 8002760:	40022000 	.word	0x40022000
 8002764:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_ClockConfig+0x2e8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_RCC_ClockConfig+0x2e8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x2e8>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4912      	ldr	r1, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x2e8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027a6:	f000 f829 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCC_ClockConfig+0x2e8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b4:	22f0      	movs	r2, #240	; 0xf0
 80027b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	60fa      	str	r2, [r7, #12]
  return result;
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	40d3      	lsrs	r3, r2
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x2ec>)
 80027cc:	5cd3      	ldrb	r3, [r2, r3]
 80027ce:	fa21 f303 	lsr.w	r3, r1, r3
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_RCC_ClockConfig+0x2f0>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x2f4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd ff4e 	bl	800067c <HAL_InitTick>
  
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3778      	adds	r7, #120	; 0x78
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08002940 	.word	0x08002940
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b08b      	sub	sp, #44	; 0x2c
 8002800:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b04      	cmp	r3, #4
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x30>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x36>
 800282a:	e03c      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800282e:	623b      	str	r3, [r7, #32]
      break;
 8002830:	e03c      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002838:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800283c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	607a      	str	r2, [r7, #4]
  return result;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	40d3      	lsrs	r3, r2
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	220f      	movs	r2, #15
 8002860:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	60fa      	str	r2, [r7, #12]
  return result;
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	40d3      	lsrs	r3, r2
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	fbb2 f2f3 	udiv	r2, r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	e004      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	623b      	str	r3, [r7, #32]
      break;
 80028a4:	e002      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028a8:	623b      	str	r3, [r7, #32]
      break;
 80028aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	372c      	adds	r7, #44	; 0x2c
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	007a1200 	.word	0x007a1200
 80028c4:	08002950 	.word	0x08002950
 80028c8:	08002960 	.word	0x08002960
 80028cc:	003d0900 	.word	0x003d0900

080028d0 <__libc_init_array>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4e0d      	ldr	r6, [pc, #52]	; (8002908 <__libc_init_array+0x38>)
 80028d4:	4c0d      	ldr	r4, [pc, #52]	; (800290c <__libc_init_array+0x3c>)
 80028d6:	1ba4      	subs	r4, r4, r6
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	2500      	movs	r5, #0
 80028dc:	42a5      	cmp	r5, r4
 80028de:	d109      	bne.n	80028f4 <__libc_init_array+0x24>
 80028e0:	4e0b      	ldr	r6, [pc, #44]	; (8002910 <__libc_init_array+0x40>)
 80028e2:	4c0c      	ldr	r4, [pc, #48]	; (8002914 <__libc_init_array+0x44>)
 80028e4:	f000 f820 	bl	8002928 <_init>
 80028e8:	1ba4      	subs	r4, r4, r6
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	2500      	movs	r5, #0
 80028ee:	42a5      	cmp	r5, r4
 80028f0:	d105      	bne.n	80028fe <__libc_init_array+0x2e>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f8:	4798      	blx	r3
 80028fa:	3501      	adds	r5, #1
 80028fc:	e7ee      	b.n	80028dc <__libc_init_array+0xc>
 80028fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002902:	4798      	blx	r3
 8002904:	3501      	adds	r5, #1
 8002906:	e7f2      	b.n	80028ee <__libc_init_array+0x1e>
 8002908:	08002970 	.word	0x08002970
 800290c:	08002970 	.word	0x08002970
 8002910:	08002970 	.word	0x08002970
 8002914:	08002974 	.word	0x08002974

08002918 <memset>:
 8002918:	4402      	add	r2, r0
 800291a:	4603      	mov	r3, r0
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <memset+0xa>
 8002920:	4770      	bx	lr
 8002922:	f803 1b01 	strb.w	r1, [r3], #1
 8002926:	e7f9      	b.n	800291c <memset+0x4>

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
